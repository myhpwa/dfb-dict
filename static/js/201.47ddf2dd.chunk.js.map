{"version":3,"file":"static/js/201.47ddf2dd.chunk.js","mappings":"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","sources":["../node_modules/@stencil/core/internal/client/shadow-css.js"],"sourcesContent":["// src/utils/regular-expression.ts\nvar escapeRegExpSpecialCharacters = (text) => {\n  return text.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n};\n\n// src/utils/shadow-css.ts\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from `webcomponents.js` to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nvar safeSelector = (selector) => {\n  const placeholders = [];\n  let index = 0;\n  selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n    const replaceBy = `__ph-${index}__`;\n    placeholders.push(keep);\n    index++;\n    return replaceBy;\n  });\n  const content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n    const replaceBy = `__ph-${index}__`;\n    placeholders.push(exp);\n    index++;\n    return pseudo + replaceBy;\n  });\n  const ss = {\n    content,\n    placeholders\n  };\n  return ss;\n};\nvar restoreSafeSelector = (placeholders, content) => {\n  return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\n};\nvar _polyfillHost = \"-shadowcsshost\";\nvar _polyfillSlotted = \"-shadowcssslotted\";\nvar _polyfillHostContext = \"-shadowcsscontext\";\nvar _parenSuffix = \")(?:\\\\(((?:\\\\([^)(]*\\\\)|[^)(]*)+?)\\\\))?([^,{]*)\";\nvar _cssColonHostRe = new RegExp(\"(\" + _polyfillHost + _parenSuffix, \"gim\");\nvar _cssColonHostContextRe = new RegExp(\"(\" + _polyfillHostContext + _parenSuffix, \"gim\");\nvar _cssColonSlottedRe = new RegExp(\"(\" + _polyfillSlotted + _parenSuffix, \"gim\");\nvar _polyfillHostNoCombinator = _polyfillHost + \"-no-combinator\";\nvar _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nvar _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nvar _selectorReSuffix = \"([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$\";\nvar _polyfillHostRe = /-shadowcsshost/gim;\nvar createSupportsRuleRe = (selector) => new RegExp(`((?<!(^@supports(.*)))|(?<={.*))(${selector}\\\\b)`, \"gim\");\nvar _colonSlottedRe = createSupportsRuleRe(\"::slotted\");\nvar _colonHostRe = createSupportsRuleRe(\":host\");\nvar _colonHostContextRe = createSupportsRuleRe(\":host-context\");\nvar _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nvar stripComments = (input) => {\n  return input.replace(_commentRe, \"\");\n};\nvar _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nvar extractCommentsWithHash = (input) => {\n  return input.match(_commentWithHashRe) || [];\n};\nvar _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nvar _curlyRe = /([{}])/g;\nvar _selectorPartsRe = /(^.*?[^\\\\])??((:+)(.*)|$)/;\nvar OPEN_CURLY = \"{\";\nvar CLOSE_CURLY = \"}\";\nvar BLOCK_PLACEHOLDER = \"%BLOCK%\";\nvar processRules = (input, ruleCallback) => {\n  const inputWithEscapedBlocks = escapeBlocks(input);\n  let nextBlockIndex = 0;\n  return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n    const selector = m[2];\n    let content = \"\";\n    let suffix = m[4];\n    let contentPrefix = \"\";\n    if (suffix && suffix.startsWith(\"{\" + BLOCK_PLACEHOLDER)) {\n      content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n      suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n      contentPrefix = \"{\";\n    }\n    const cssRule = {\n      selector,\n      content\n    };\n    const rule = ruleCallback(cssRule);\n    return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n  });\n};\nvar escapeBlocks = (input) => {\n  const inputParts = input.split(_curlyRe);\n  const resultParts = [];\n  const escapedBlocks = [];\n  let bracketCount = 0;\n  let currentBlockParts = [];\n  for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n    const part = inputParts[partIndex];\n    if (part === CLOSE_CURLY) {\n      bracketCount--;\n    }\n    if (bracketCount > 0) {\n      currentBlockParts.push(part);\n    } else {\n      if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(\"\"));\n        resultParts.push(BLOCK_PLACEHOLDER);\n        currentBlockParts = [];\n      }\n      resultParts.push(part);\n    }\n    if (part === OPEN_CURLY) {\n      bracketCount++;\n    }\n  }\n  if (currentBlockParts.length > 0) {\n    escapedBlocks.push(currentBlockParts.join(\"\"));\n    resultParts.push(BLOCK_PLACEHOLDER);\n  }\n  const strEscapedBlocks = {\n    escapedString: resultParts.join(\"\"),\n    blocks: escapedBlocks\n  };\n  return strEscapedBlocks;\n};\nvar insertPolyfillHostInCssText = (cssText) => {\n  cssText = cssText.replace(_colonHostContextRe, `$1${_polyfillHostContext}`).replace(_colonHostRe, `$1${_polyfillHost}`).replace(_colonSlottedRe, `$1${_polyfillSlotted}`);\n  return cssText;\n};\nvar convertColonRule = (cssText, regExp, partReplacer) => {\n  return cssText.replace(regExp, (...m) => {\n    if (m[2]) {\n      const parts = m[2].split(\",\");\n      const r = [];\n      for (let i = 0; i < parts.length; i++) {\n        const p = parts[i].trim();\n        if (!p) break;\n        r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n      }\n      return r.join(\",\");\n    } else {\n      return _polyfillHostNoCombinator + m[3];\n    }\n  });\n};\nvar colonHostPartReplacer = (host, part, suffix) => {\n  return host + part.replace(_polyfillHost, \"\") + suffix;\n};\nvar convertColonHost = (cssText) => {\n  return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nvar colonHostContextPartReplacer = (host, part, suffix) => {\n  if (part.indexOf(_polyfillHost) > -1) {\n    return colonHostPartReplacer(host, part, suffix);\n  } else {\n    return host + part + suffix + \", \" + part + \" \" + host + suffix;\n  }\n};\nvar convertColonSlotted = (cssText, slotScopeId) => {\n  const slotClass = \".\" + slotScopeId + \" > \";\n  const selectors = [];\n  cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\n    if (m[2]) {\n      const compound = m[2].trim();\n      const suffix = m[3];\n      const slottedSelector = slotClass + compound + suffix;\n      let prefixSelector = \"\";\n      for (let i = m[4] - 1; i >= 0; i--) {\n        const char = m[5][i];\n        if (char === \"}\" || char === \",\") {\n          break;\n        }\n        prefixSelector = char + prefixSelector;\n      }\n      const orgSelector = (prefixSelector + slottedSelector).trim();\n      const addedSelector = `${prefixSelector.trimEnd()}${slottedSelector.trim()}`.trim();\n      if (orgSelector !== addedSelector) {\n        const updatedSelector = `${addedSelector}, ${orgSelector}`;\n        selectors.push({\n          orgSelector,\n          updatedSelector\n        });\n      }\n      return slottedSelector;\n    } else {\n      return _polyfillHostNoCombinator + m[3];\n    }\n  });\n  return {\n    selectors,\n    cssText\n  };\n};\nvar convertColonHostContext = (cssText) => {\n  return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nvar convertShadowDOMSelectors = (cssText) => {\n  return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, \" \"), cssText);\n};\nvar makeScopeMatcher = (scopeSelector2) => {\n  const lre = /\\[/g;\n  const rre = /\\]/g;\n  scopeSelector2 = scopeSelector2.replace(lre, \"\\\\[\").replace(rre, \"\\\\]\");\n  return new RegExp(\"^(\" + scopeSelector2 + \")\" + _selectorReSuffix, \"m\");\n};\nvar selectorNeedsScoping = (selector, scopeSelector2) => {\n  const re = makeScopeMatcher(scopeSelector2);\n  return !re.test(selector);\n};\nvar injectScopingSelector = (selector, scopingSelector) => {\n  return selector.replace(_selectorPartsRe, (_, before = \"\", _colonGroup, colon = \"\", after = \"\") => {\n    return before + scopingSelector + colon + after;\n  });\n};\nvar applySimpleSelectorScope = (selector, scopeSelector2, hostSelector) => {\n  _polyfillHostRe.lastIndex = 0;\n  if (_polyfillHostRe.test(selector)) {\n    const replaceBy = `.${hostSelector}`;\n    return selector.replace(_polyfillHostNoCombinatorRe, (_, selector2) => injectScopingSelector(selector2, replaceBy)).replace(_polyfillHostRe, replaceBy + \" \");\n  }\n  return scopeSelector2 + \" \" + selector;\n};\nvar applyStrictSelectorScope = (selector, scopeSelector2, hostSelector) => {\n  const isRe = /\\[is=([^\\]]*)\\]/g;\n  scopeSelector2 = scopeSelector2.replace(isRe, (_, ...parts) => parts[0]);\n  const className = \".\" + scopeSelector2;\n  const _scopeSelectorPart = (p) => {\n    let scopedP = p.trim();\n    if (!scopedP) {\n      return \"\";\n    }\n    if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n      scopedP = applySimpleSelectorScope(p, scopeSelector2, hostSelector);\n    } else {\n      const t = p.replace(_polyfillHostRe, \"\");\n      if (t.length > 0) {\n        scopedP = injectScopingSelector(t, className);\n      }\n    }\n    return scopedP;\n  };\n  const safeContent = safeSelector(selector);\n  selector = safeContent.content;\n  let scopedSelector = \"\";\n  let startIndex = 0;\n  let res;\n  const sep = /( |>|\\+|~(?!=))\\s*/g;\n  const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n  let shouldScope = !hasHost;\n  while ((res = sep.exec(selector)) !== null) {\n    const separator = res[1];\n    const part2 = selector.slice(startIndex, res.index).trim();\n    shouldScope = shouldScope || part2.indexOf(_polyfillHostNoCombinator) > -1;\n    const scopedPart = shouldScope ? _scopeSelectorPart(part2) : part2;\n    scopedSelector += `${scopedPart} ${separator} `;\n    startIndex = sep.lastIndex;\n  }\n  const part = selector.substring(startIndex);\n  shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n  scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n  return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nvar scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\n  return selector.split(\",\").map((shallowPart) => {\n    if (slotSelector && shallowPart.indexOf(\".\" + slotSelector) > -1) {\n      return shallowPart.trim();\n    }\n    if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n      return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n    } else {\n      return shallowPart.trim();\n    }\n  }).join(\", \");\n};\nvar scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {\n  return processRules(cssText, (rule) => {\n    let selector = rule.selector;\n    let content = rule.content;\n    if (rule.selector[0] !== \"@\") {\n      selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n    } else if (rule.selector.startsWith(\"@media\") || rule.selector.startsWith(\"@supports\") || rule.selector.startsWith(\"@page\") || rule.selector.startsWith(\"@document\")) {\n      content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector);\n    }\n    const cssRule = {\n      selector: selector.replace(/\\s{2,}/g, \" \").trim(),\n      content\n    };\n    return cssRule;\n  });\n};\nvar scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) => {\n  cssText = insertPolyfillHostInCssText(cssText);\n  cssText = convertColonHost(cssText);\n  cssText = convertColonHostContext(cssText);\n  const slotted = convertColonSlotted(cssText, slotScopeId);\n  cssText = slotted.cssText;\n  cssText = convertShadowDOMSelectors(cssText);\n  if (scopeId) {\n    cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector);\n  }\n  cssText = replaceShadowCssHost(cssText, hostScopeId);\n  cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, \" $1 \");\n  return {\n    cssText: cssText.trim(),\n    // We need to replace the shadow CSS host string in each of these selectors since we created\n    // them prior to the replacement happening in the components CSS text.\n    slottedSelectors: slotted.selectors.map((ref) => ({\n      orgSelector: replaceShadowCssHost(ref.orgSelector, hostScopeId),\n      updatedSelector: replaceShadowCssHost(ref.updatedSelector, hostScopeId)\n    }))\n  };\n};\nvar replaceShadowCssHost = (cssText, hostScopeId) => {\n  return cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n};\nvar scopeCss = (cssText, scopeId, commentOriginalSelector) => {\n  const hostScopeId = scopeId + \"-h\";\n  const slotScopeId = scopeId + \"-s\";\n  const commentsWithHash = extractCommentsWithHash(cssText);\n  cssText = stripComments(cssText);\n  const orgSelectors = [];\n  if (commentOriginalSelector) {\n    const processCommentedSelector = (rule) => {\n      const placeholder = `/*!@___${orgSelectors.length}___*/`;\n      const comment = `/*!@${rule.selector}*/`;\n      orgSelectors.push({ placeholder, comment });\n      rule.selector = placeholder + rule.selector;\n      return rule;\n    };\n    cssText = processRules(cssText, (rule) => {\n      if (rule.selector[0] !== \"@\") {\n        return processCommentedSelector(rule);\n      } else if (rule.selector.startsWith(\"@media\") || rule.selector.startsWith(\"@supports\") || rule.selector.startsWith(\"@page\") || rule.selector.startsWith(\"@document\")) {\n        rule.content = processRules(rule.content, processCommentedSelector);\n        return rule;\n      }\n      return rule;\n    });\n  }\n  const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector);\n  cssText = [scoped.cssText, ...commentsWithHash].join(\"\\n\");\n  if (commentOriginalSelector) {\n    orgSelectors.forEach(({ placeholder, comment }) => {\n      cssText = cssText.replace(placeholder, comment);\n    });\n  }\n  scoped.slottedSelectors.forEach((slottedSelector) => {\n    const regex = new RegExp(escapeRegExpSpecialCharacters(slottedSelector.orgSelector), \"g\");\n    cssText = cssText.replace(regex, slottedSelector.updatedSelector);\n  });\n  return cssText;\n};\nexport {\n  scopeCss\n};\n"],"names":["_polyfillHost","_polyfillSlotted","_polyfillHostContext","_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinator","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_polyfillHostRe","createSupportsRuleRe","selector","_colonSlottedRe","_colonHostRe","_colonHostContextRe","_commentRe","_commentWithHashRe","_ruleRe","_curlyRe","_selectorPartsRe","BLOCK_PLACEHOLDER","processRules","input","ruleCallback","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","escapedString","replace","content","suffix","contentPrefix","startsWith","blocks","substring","length","cssRule","rule","inputParts","split","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","part","push","join","convertColonRule","cssText","regExp","partReplacer","m","parts","r","i","p","trim","colonHostPartReplacer","host","colonHostContextPartReplacer","indexOf","selectorNeedsScoping","scopeSelector2","re","makeScopeMatcher","test","injectScopingSelector","scopingSelector","_","before","colon","after","applyStrictSelectorScope","hostSelector","res","className","_scopeSelectorPart","scopedP","lastIndex","replaceBy","selector2","applySimpleSelectorScope","t","safeContent","placeholders","index","keep","pseudo","exp","safeSelector","scopedSelector","startIndex","sep","shouldScope","exec","separator","part2","slice","scopedPart","scopeSelectors","scopeSelectorText","slotSelector","commentOriginalSelector","map","shallowPart","scopeSelector","scopeCssText","scopeId","hostScopeId","slotScopeId","slotted","slotClass","selectors","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","trimEnd","updatedSelector","convertColonSlotted","convertColonHostContext","convertColonHost","insertPolyfillHostInCssText","reduce","result","pattern","convertShadowDOMSelectors","replaceShadowCssHost","slottedSelectors","ref","scopeCss","commentsWithHash","match","stripComments","orgSelectors","processCommentedSelector","placeholder","comment","scoped","forEach","regex"],"sourceRoot":""}